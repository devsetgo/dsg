<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on DevSetGo</title>
    <link>https://devsetgo.com/tags/python/</link>
    <description>Recent content in python on DevSetGo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en_US</language>
    <lastBuildDate>Mon, 22 Apr 2019 12:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://devsetgo.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using Spring Cloud Config with Python Requests</title>
      <link>https://devsetgo.com/posts/2019-4-22-spring-cloud-config/</link>
      <pubDate>Mon, 22 Apr 2019 12:00:00 +0000</pubDate>
      
      <guid>https://devsetgo.com/posts/2019-4-22-spring-cloud-config/</guid>
      <description>At work we use Spring Cloud Config as part of are management of external dependencies for JAVA APIs. So I thought this would be useful to manage dependencies for Python applications also and an effective way of dealing with external environment variables when deploying a docker image as part of a Twelve Factor App.
Why is this important?
 You don&#39;t want to hardcode your configuration (keys, IP address, userid, passwords) Deploying .</description>
    </item>
    
    <item>
      <title>Python FastAPI Library</title>
      <link>https://devsetgo.com/posts/2019-4-20-python-fastapi/</link>
      <pubDate>Sat, 20 Apr 2019 12:00:00 +0000</pubDate>
      
      <guid>https://devsetgo.com/posts/2019-4-20-python-fastapi/</guid>
      <description>Over the last few months I have been learning Python&#39;s Asyncio library. It came from a need at work. I needed to pull a large about of data from Sonarqube. The data is broke into pages of 500 issues each and it required about 50 calls to retrieve all the issues. Using Requests this took about 8-10 minutes via synchronous calls. Each page load being 4-8 seconds and the data processing at the end (about 10 seconds).</description>
    </item>
    
    <item>
      <title>Python Async</title>
      <link>https://devsetgo.com/posts/2019-2-2-python-async/</link>
      <pubDate>Sat, 02 Feb 2019 18:26:39 -0500</pubDate>
      
      <guid>https://devsetgo.com/posts/2019-2-2-python-async/</guid>
      <description>Even though I am still working through how to make async calls, I made an example and came up with a simple idea on how to start using async while I am learning it. I built a simple example of fetching a list of tasks and then asynchronous calls to fetch the list of URLs being passed. Here is the example on Github. No promises that any of that code is the right way to do async or frankly will even work.</description>
    </item>
    
    <item>
      <title>Cookiecutter Flask SB Admin</title>
      <link>https://devsetgo.com/posts/2019-1-1-cookiecutter-flask-sbadmin/</link>
      <pubDate>Tue, 01 Jan 2019 21:54:49 -0500</pubDate>
      
      <guid>https://devsetgo.com/posts/2019-1-1-cookiecutter-flask-sbadmin/</guid>
      <description>Cookiecutter is a template builder for Python applications. Steven Loria has a great and popular cookiecutter-flask that is a great starting point. I have been wanting to use a dashboard style bootstrap template called SB Admin. I have a couple projects I have been working to adapt the template too. The idea to create a cookiecutter came from looking back at Steven Loria&#39;s cookiecutter to work on flask-login and blueprints.</description>
    </item>
    
    <item>
      <title>Current Work</title>
      <link>https://devsetgo.com/posts/2018-12-26-current-work/</link>
      <pubDate>Wed, 26 Dec 2018 23:16:49 -0500</pubDate>
      
      <guid>https://devsetgo.com/posts/2018-12-26-current-work/</guid>
      <description>Some interesting stuff I&#39;ve been reading about or looking into.
 Flask Blueprints - I&#39;ve been reading about flask blueprints and building a basic template to utilize. Need to add in a User management with Flask-Login and my template should be done. Kubernettes - This is the competitor to Docker Swarm. I will be using it at work. Still runs the docker enginer, but is supposed to be a better cluster management platform.</description>
    </item>
    
    <item>
      <title>And We Are Back...</title>
      <link>https://devsetgo.com/posts/2018-12-26-and-we-are-back/</link>
      <pubDate>Wed, 26 Dec 2018 22:39:11 -0500</pubDate>
      
      <guid>https://devsetgo.com/posts/2018-12-26-and-we-are-back/</guid>
      <description>So I broke my last site (or two). I had been using Wordpress and decided I wanted something light weight. So I started playing with Ghost and eventually had it running on my Docker instance. Initially I had it setup to learn and test, while also using it as my blog. Then I ran into a lot of issues&amp;hellip; way more than you should run into when learning/building a blog.</description>
    </item>
    
  </channel>
</rss>